Q.1 When would you want to use a remote repository rather than keeping all
your work local?

    The reason for using a remote repository rather than keeping all your
    work local are as follows:
    1. Serves as a backup of your local repository.
    2. Allows you to collaborate and share your projects with other people
       on the web.
    3. Your projects are easily accessible from anywhere.

Q2. Why might you want to always pull changes manually rather than having
Git automatically stay up-to-date with your remote repository?

    The reasons why you would want to pull changes manually from a remote
    repository rather than git automatically syncing is to avoid a certain
    situation where in you are working on a branch and are in the middle of an
    implementation.In such a case you would like to complete your implementation
    and commit your work to your local repository before you sync the local
    repository with any additional new changes (commits) made to the remote
    repository.

Q3. Describe the differences between forks, clones, and branches.
When would you use one instead of another?

    Fork - Is a concept limited to Github. Fork is to make a copy of someone
    else's repository under your own account in the Github server. You can
    now have an identical repository under your account as the one you forked.
    You can not clone this repository under your account to your local machine
    and make changes and commit them locally, after which you can push these
    changes back to the repository under your account.
    You could also add collaborators who could make changes to this repository
    under your account.
    This repository links back to the original repository you used to fork in
    the first place and it makes it easier to suggest changes to the original,
    since you may not have the permission to make changes to the original
    repository.
    Forking someone else's repository also keeps track of the number of people
    who have forked this repository.

    Clone - Is to make a copy of a repository from a url to your local machine.
    You could also use a local repository and clone it to a different location
    on your local system.
    Cloning is typically used to make a local copy of your Github repository on
    the local system so that changes can be easily made and pushed back to the
    Github repository when complete and committed.

    Branches - A branch is a series of commits that originates at a commit on
    some other branch (typically a master branch). A branch represents a
    version of your files and folders in the repository.
    When you want to create a new feature or try an experiment you could make a
    new branch in git and `checkout` the new branch to continue working.
    This does not disturb the original version of your project (the master
    branch) and you could switch versions simply by switching branches.
    When you switch branches the files and folders in the repository are
    automatically updated to correspond to their last commit state.
    Once you have completed adding the new feature or experiment - you can
    merge the branch into your master branch (post resolution of conflicts if
    any) and delete the experimental/new-feature branch.
    If the branch is not merged with the master and you attempt to delete it,
    you will loose all your commits in the experimental branch. However, if
    you remember their commit ID you can still access them unless the git
    garbage collector runs automatically.

Q4. What is the benefit of having a copy of the last known state of the
remote stored locally?

    When you have a a copy of the last known state of the remote stored locally
    you can:
    1. Track the commits you have made locally after the last known state on
       the remote.
    2. When you have have a commit on your local repository past the commit
       of the last know state commit on remote and you also have a different
       commit on your remote repository past the commit of the last known state
       commit of the remote and you try to sync the two together, git
       essentially updates the branch having the copy of the last known state
       of the remote on your local system. It then attempts to merge the
       updated branch having the copy of the last known state of the remote with
       the corresponding branch in the local repository, thereby creating a new
       merged commit. This ensures that the new commit in the branch of the
       local repository is NOT overwritten by the new commit on the remote
       repository and thus the branch copy of the last known state of the remote
       actively assists in merging both the new commits to the branch in the
       local repository.


Q5. How would you collaborate without using Git or GitHub?  What would be
easier, and what would be harder?

    Fill in your answer here

Q6. When would you want to make changes in a separate branch rather than
directly in master?  What benefits does each approach have?

    Fill in your answer here
